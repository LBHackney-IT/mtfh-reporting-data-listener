service: mtfh-reporting-data-listener
provider:
  name: aws
  runtime: dotnetcore3.1
  memorySize: 2048
  tracing:
    lambda: true
    apiGateway: true
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  account: ${opt:account}
  region: eu-west-2

package:
  artifact: ./bin/release/netcoreapp3.1/mtfh-reporting-data-listener.zip

functions:
  MtfhReportingDataListener:
    name: ${self:service}-${self:provider.stage}
    handler: MtfhReportingDataListener::MtfhReportingDataListener.SqsFunction::FunctionHandler
    role: lambdaExecutionRole
    environment:
      ### Re-use the same parameter as used by web api applications
      ENVIRONMENT:  ${ssm:/housing-tl/${self:provider.stage}/aspnetcore-environment}
      TenureApiUrl: ${ssm:/housing-tl/${self:provider.stage}/tenure-api-url}
      TenureApiToken: ${ssm:/housing-tl/${self:provider.stage}/tenure-api-token}
      DATAPLATFORM_KAFKA_HOSTNAME: ${ssm:/housing-tl/${self:provider.stage}/dataplatform-kafka-hostname}
      SCHEMA_ARN: ${ssm:/housing-tl/${self:provider.stage}/dataplatform-tenure-schema-arn}
      ROLE_ARN_TO_ACCESS_DATAPLATFORM_GLUE_REGISTRY: ${ssm:/housing-tl/${self:provider.stage}/dataplatform-role-arn-to-access-glue-registry}
      TENURE_API_KAFKA_TOPIC: ${ssm:/housing-tl/${self:provider.stage}/tenure-kafka-topic}
    events:
      ## Specify the parameter containing the queue arn used to trigget the lambda function here
      ## This will have been defined in the terraform configuration
       - sqs: ${ssm:/sqs-queue/${self:provider.stage}/mtfhreportingdata/arn}

resources:
  Resources:
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: ${self:service}-${self:provider.stage}-sg
        GroupDescription: Allow all outbound traffic
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
        VpcId: ${self:custom.vpcId.${opt:stage}}
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
          - PolicyName: sqsAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "sqs:ChangeMessageVisibility"
                    - "sqs:DeleteMessage"
                    - "sqs:GetQueueAttributes"
                    - "sqs:GetQueueUrl"
                    - "sqs:ListQueueTags"
                    - "sqs:ReceiveMessage"
                    - "sqs:SendMessage"
                    - "kms:Decrypt"
                  Resource: "*"
          - PolicyName: assumeGlueRole
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "sts:AssumeRole"
                  Resource: ${ssm:/housing-tl/${self:provider.stage}/dataplatform-role-arn-to-access-glue-registry}

custom:
  vpcId:
    development: vpc-0d15f152935c8716f
    staging: vpc-064521a7a4109ba31
    production: vpc-0ce853ddb64e8fb3c
  vpc:
    development:
      securityGroupIds:
        - Ref: LambdaSecurityGroup
      subnetIds:
        - subnet-0140d06fb84fdb547
        - subnet-05ce390ba88c42bfd
    staging:
      securityGroupIds:
        - Ref: LambdaSecurityGroup
      subnetIds:
        - subnet-0743d86e9b362fa38
        - subnet-0ea0020a44b98a2ca
    production:
      securityGroupIds:
        - Ref: LambdaSecurityGroup
      subnetIds:
        - subnet-06a697d86a9b6ed01
        - subnet-0beb266003a56ca82
