version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@3.0.0
  aws-cli: circleci/aws-cli@5.1.0
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0
  sonarcloud: sonarsource/sonarcloud@2.0.0

executors:
  docker-python:
    docker:
      - image: cimg/python:3.13
  docker-terraform:
    docker:
      - image: "hashicorp/terraform:1.1.9"
  docker-dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:8.0

references:
  workspace_root: &workspace_root "~"
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  assume-role-and-persist-workspace:
    description: "Assumes deployment role and persists credentials across jobs"
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: "LBH_Circle_CI_Deployment_Role"
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
  terraform-init-then-plan:
    description: "Initializes and run plan from terraform configuration"
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform get -update=true
            terraform init
          name: get and init
      - run:
          name: plan
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform plan -out=plan.out
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
            - project/*
  terraform-compliance:
    description: "Run Terraform Compliance checks"
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            cd ./terraform/<<parameters.environment>>/
            apk add --update --no-cache python3 && ln -sf python3 /usr/bin/python
            apk add --update --no-cache g++ gcc libxslt-dev python3-dev
            python3 -m ensurepip
            pip3 install --no-cache --upgrade pip setuptools
            pip install terraform-compliance
            terraform-compliance -f terraform-compliance/ -p plan.out
          name: terraform compliance
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
  terraform-apply:
    description: "Runs Terraform Apply"
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: apply
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform apply -auto-approve plan.out
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
  terraform-preview:
    description: "Gives a preview for Terraform configuration changes."
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform get -update=true
            terraform init
            terraform plan
          name: terraform preview
  fix-stack-rollback:
    description: "Fixes the CloudFormation UPDATE_ROLLBACK_FAILED when upgrading lambda from an unsupported runtime."
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - aws-cli/install
      - run:
          command: |
            get_stack_status() {
              local stack_name="$1"
              aws cloudformation describe-stacks \
                --stack-name "$stack_name" \
                --query 'Stacks[].StackStatus | [0]' \
                --no-paginate \
                --output text
            }

            # Needed in case of a retry to prevent processing the same action twice.
            REQUEST_TOKEN="ContinueUpdateRollback-<<parameters.environment>>-9e28137b-c8c8-43d2-9389-afb0efccb623"

            SERVICE_NAME=$(find . -type f -name 'serverless.yml' -exec grep -oP 'service:\s+\K[\w-]+$' {} \;)
            echo -e "Service $SERVICE_NAME detected.\n"

            CF_STACK_NAME="${SERVICE_NAME}-<<parameters.environment>>"
            echo -e "Checking $CF_STACK_NAME stack's status.\n"

            STACK_STATUS=$(get_stack_status "$CF_STACK_NAME")
            if [[ "$STACK_STATUS" != "UPDATE_ROLLBACK_FAILED" ]]; then
              echo "Stack hasn't experienced rollback failure yet!"
              exit 0
            fi

            # Debug/failsafe sleep
            sleep 20s

            echo -e "CF stack is confirmed to have failed rollback. Performing manual one.\n"
            echo -e "Searching $CF_STACK_NAME resources for failures...\n"

            FAILED_ROLLBACK_RESOURCES=$( \
              aws cloudformation describe-stack-resources \
                --stack-name "$CF_STACK_NAME" \
                --query "StackResources[?ResourceStatus == 'UPDATE_FAILED']" \
                --no-paginate \
                --output json \
            )
            echo "Failing resources found:"
            echo $FAILED_ROLLBACK_RESOURCES | \
            jq -r '.[] | "Resource: \(.LogicalResourceId),\nFail Reason: \(.ResourceStatusReason).\n"'
            
            FAILED_RESOURCE_IDENTIFIERS=$( \
              echo $FAILED_ROLLBACK_RESOURCES | \
              jq -r '[.[].LogicalResourceId] | join(" ")' \
            )
            echo "Failed ids: *$FAILED_RESOURCE_IDENTIFIERS*.\n"

            # Perform manual CF stack rollback
            echo -e "Trigger continuation of the $CF_STACK_NAME rollback whilst excluding failed resources.\n"
            aws cloudformation continue-update-rollback \
              --stack-name $CF_STACK_NAME \
              --resources-to-skip $FAILED_RESOURCE_IDENTIFIERS \
              --client-request-token $REQUEST_TOKEN
            
            echo -e "Await updates from AWS confirming rollback progress:\n"
            STACK_STATUS=''
            until (echo $STACK_STATUS | grep -iqP '^UPDATE_ROLLBACK_COMPLETE$');
            do
              STACK_STATUS=$(get_stack_status "$CF_STACK_NAME")
              echo "The $CF_STACK_NAME stack status is: $STACK_STATUS."
              sleep 1s
            done

            echo "The $CF_STACK_NAME stack status is: $STACK_STATUS."
            echo -e "\nScript done."
          name: manual rollback
  deploy-lambda:
    description: "Deploys via Serverless"
    parameters:
      stage:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_20.x | bash -
            apt-get update && apt-get install -y nodejs
      - run:
          name: Install serverless CLI
          command: npm i -g serverless@^3
      - run:
          name: Build lambda
          command: |
            cd ./MtfhReportingDataListener/
            chmod +x ./build.sh
            ./build.sh
      - run:
          name: Deploy lambda
          command: |
            cd ./MtfhReportingDataListener/
            sls deploy --stage <<parameters.stage>> --conceal

jobs:
  check-code-formatting:
    executor: docker-dotnet
    steps:
      - checkout
      - run:
          name: Install dotnet format
          command: dotnet tool install dotnet-format --tool-path ./dotnet-format-local/
      - run:
          name: Run formatter check
          command: ./dotnet-format-local/dotnet-format --check
  build-and-test:
    executor: docker-python
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build
          command: docker compose build mtfh-reporting-data-listener-test
      - run:
          name: Run tests
          command: docker compose run mtfh-reporting-data-listener-test
      - run:
          name: Report
          command: |
            mkdir coverage
            docker cp $(docker ps -aqf "name=mtfh-reporting-data-listener-test"):/app/coverage ./
            sed -i "s|/app/|$(pwd)/|g" coverage/*/coverage.opencover.xml
      - sonarcloud/scan
  assume-role-development:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
  assume-role-staging:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING
  assume-role-production:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION
  terraform-init-and-plan-development:
    executor: docker-terraform
    steps:
      - terraform-init-then-plan:
          environment: "development"
  terraform-compliance-development:
    executor: docker-terraform
    steps:
      - terraform-compliance:
          environment: "development"
  terraform-apply-development:
    executor: docker-terraform
    steps:
      - terraform-apply:
          environment: "development"
  terraform-init-and-plan-staging:
    executor: docker-terraform
    steps:
      - terraform-init-then-plan:
          environment: "staging"
  terraform-compliance-staging:
    executor: docker-terraform
    steps:
      - terraform-compliance:
          environment: "staging"
  terraform-apply-staging:
    executor: docker-terraform
    steps:
      - terraform-apply:
          environment: "staging"
  terraform-init-and-plan-production:
    executor: docker-terraform
    steps:
      - terraform-init-then-plan:
          environment: "production"
  terraform-compliance-production:
    executor: docker-terraform
    steps:
      - terraform-compliance:
          environment: "production"
  terraform-apply-production:
    executor: docker-terraform
    steps:
      - terraform-apply:
          environment: "production"
  preview-development-terraform:
    executor: docker-terraform
    steps:
      - terraform-preview:
          environment: "development"
  preview-staging-terraform:
    executor: docker-terraform
    steps:
      - terraform-preview:
          environment: "staging"
  preview-production-terraform:
    executor: docker-terraform
    steps:
      - terraform-preview:
          environment: "production"
  fix-stack-rollback-development:
    executor: aws-cli/default
    steps:
      - fix-stack-rollback:
          environment: "development"
  fix-stack-rollback-staging:
    executor: aws-cli/default
    steps:
      - fix-stack-rollback:
          environment: "staging"
  fix-stack-rollback-production:
    executor: aws-cli/default
    steps:
      - fix-stack-rollback:
          environment: "production"
  deploy-to-development:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "development"
  deploy-to-staging:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "staging"
  deploy-to-production:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "production"

workflows:
  feature:
    jobs:
      - check-code-formatting:
          context: api-nuget-token-context
          filters:
            branches:
              ignore:
                - master
                - release
      - build-and-test:
          context:
            - api-nuget-token-context
            - SonarCloud
          filters:
            branches:
              ignore:
                - master
                - release
      - assume-role-development:
          context: api-assume-role-housing-development-context
          filters:
            branches:
              ignore:
                - master
                - release
      - preview-development-terraform:
          requires:
            - assume-role-development
      - assume-role-staging:
          context: api-assume-role-housing-staging-context
          filters:
            branches:
              ignore:
                - master
                - release
      - preview-staging-terraform:
          requires:
            - assume-role-staging
      - assume-role-production:
          context: api-assume-role-housing-production-context
          filters:
            branches:
              ignore:
                - master
                - release
      - preview-production-terraform:
          requires:
            - assume-role-production
  development:
    jobs:
      - build-and-test:
          context:
            - api-nuget-token-context
            - SonarCloud
          filters:
            branches:
              only: master
      - assume-role-development:
          context: api-assume-role-housing-development-context
          requires:
            - build-and-test
      - terraform-init-and-plan-development:
          requires:
            - assume-role-development
      - terraform-compliance-development:
          requires:
            - terraform-init-and-plan-development
      - terraform-apply-development:
          requires:
            - terraform-compliance-development
      - deploy-to-development:
          context: api-nuget-token-context
          requires:
            - terraform-apply-development
  staging-and-production:
    jobs:
      - check-code-formatting:
          context: api-nuget-token-context
          filters:
            branches:
              only: release
      - build-and-test:
          context:
            - api-nuget-token-context
            - SonarCloud
          filters:
            branches:
              only: release
      - assume-role-staging:
          context: api-assume-role-housing-staging-context
          requires:
              - build-and-test
          filters:
              branches:
                only: release
      - terraform-init-and-plan-staging:
          requires:
            - assume-role-staging
          filters:
            branches:
              only: release
      - terraform-compliance-staging:
          requires:
            - terraform-init-and-plan-staging
          filters:
            branches:
              only: release
      - terraform-apply-staging:
          requires:
            - terraform-compliance-staging
          filters:
            branches:
              only: release
      - deploy-to-staging:
          context: api-nuget-token-context
          requires:
            - terraform-apply-staging
          filters:
            branches:
              only: release
      - permit-production-terraform-release:
          type: approval
          requires:
            - deploy-to-staging
          filters:
            branches:
              only: release
      - assume-role-production:
          context: api-assume-role-housing-production-context
          requires:
              - permit-production-terraform-release
          filters:
              branches:
                only: release
      - terraform-init-and-plan-production:
          requires:
            - assume-role-production
          filters:
            branches:
              only: release
      - terraform-compliance-production:
          requires:
            - terraform-init-and-plan-production
          filters:
            branches:
              only: release
      - terraform-apply-production:
          requires:
            - terraform-compliance-production
          filters:
            branches:
              only: release
      - permit-production-release:
          type: approval
          requires:
            - deploy-to-staging
            - terraform-apply-production
          filters:
            branches:
              only: release
      - deploy-to-production:
          context: api-nuget-token-context
          requires:
            - permit-production-release
          filters:
            branches:
              only: release
